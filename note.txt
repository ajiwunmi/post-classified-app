 // "devDependencies": {
  //   "@eslint/eslintrc": "^3",
  //   "@tailwindcss/postcss": "^4.1.4",
  //   "@types/bcrypt": "^5.0.2",
  //   "@types/jsonwebtoken": "^9.0.9",
  //   "@types/next-auth": "^3.15.0",
  //   "@types/node": "^20",
  //   "@types/react": "^19",
  //   "@types/react-dom": "^19",
  //   "eslint": "^9.24.0",
  //   "eslint-config-next": "15.3.1",
  //   "eslint-config-prettier": "^10.1.2",
  //   "eslint-plugin-react": "^7.37.5",
  //   "husky": "^8.0.3",
  //   "lint-staged": "^15.5.1",
  //   "prettier": "^3.5.3",
  //   "typescript": "^5"
  // }


.eslint.js
module.exports = {
	root: true,
	parser: "@typescript-eslint/parser",
	parserOptions: {
		ecmaVersion: 2020,
		sourceType: "module",
		project: "./tsconfig.json",
	},
	plugins: ["@typescript-eslint", "react", "tailwindcss"],
	extends: [
		"eslint:recommended",
		"plugin:react/recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:tailwindcss/recommended",
		"plugin:prettier/recommended",
		"next",
		"next/core-web-vitals",
	],
	rules: {
		// Customize rules if needed
		"@typescript-eslint/no-unused-vars": ["warn"],
		"react/react-in-jsx-scope": "off",
	},
};


eslint-config.mjs
import globals from "globals"
import pluginJs from "@eslint/js"
import tseslint from "typescript-eslint"
import pluginReact from "eslint-plugin-react"
import eslintPluginUnicorn from "eslint-plugin-unicorn"
import tailwind from "eslint-plugin-tailwindcss"
import { FlatCompat } from "@eslint/eslintrc"

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

/** @type {import('eslint').Linter.Config[]} */
const config = [
  { ignores: [".next/**", "public/**", "next.config.js", "postcss.config.js"] },
  { files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"] },
  { languageOptions: { globals: { ...globals.browser, ...globals.node } } },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  pluginReact.configs.flat.recommended,
  eslintPluginUnicorn.configs["flat/recommended"],
  ...tailwind.configs["flat/recommended"],
  ...compat.config({
    extends: ["next"],
    settings: {
      next: {
        rootDir: ".",
      },
    },
  }),
  ...compat.config({
    extends: ["plugin:drizzle/all"],
  }),
  {
    rules: {
      "no-undef": "error",
      "react/react-in-jsx-scope": "off",
      "tailwindcss/no-custom-classname": "off",
      "@typescript-eslint/no-unused-vars": [
        "error", // or "error"
        {
          argsIgnorePattern: "^_",
          varsIgnorePattern: "^_",
          caughtErrorsIgnorePattern: "^_",
        },
      ],
      "unicorn/prevent-abbreviations": "off",
    },
  },
  {
    files: ["**/*.{jsx,tsx}"],
    rules: {
      "no-console": "error",
    },
  },
]
export default config



const compat = new FlatCompat({
  baseDirectory: import.meta.dirname,
});

/** @type {import('eslint').Linter.Config[]} */
const config = [
  { ignores: ['.next/**', 'public/**', 'next.config.js', 'postcss.config.js'] },
  { files: ['**/*.{js,mjs,cjs,ts,jsx,tsx}'] },
  {
    languageOptions: {
      globals: { ...globals.browser, ...globals.node, React: 'writable' },
      parserOptions: {  ecmaFeatures: {jsx: true } },
  },
  },
  pluginJs.configs.recommended,
  pluginReact.configs.flat.recommended,
  ...compat.config({
    extends: ['next'],
    settings: {
      next: {
        rootDir: '.',
      },
    },
  }),

  {
    rules: {
      'no-undef': 'error',
      'react/react-in-jsx-scope': 'off',
    },
  },
  {
    files: ['**/*.{jsx,tsx}'],
    rules: {
      'no-console': 'error',
    },
  },
  
];
export default config;


import { logger } from "@/lib/logger";

logger.info("User clicked login button");
logger.error("Something went wrong", { error });
logger.debug("This is a debug log", { userId });
logger.warn("This is a warning log");
