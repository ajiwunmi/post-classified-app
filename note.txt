 // "devDependencies": {
  //   "@eslint/eslintrc": "^3",
  //   "@tailwindcss/postcss": "^4.1.4",
  //   "@types/bcrypt": "^5.0.2",
  //   "@types/jsonwebtoken": "^9.0.9",
  //   "@types/next-auth": "^3.15.0",
  //   "@types/node": "^20",
  //   "@types/react": "^19",
  //   "@types/react-dom": "^19",
  //   "eslint": "^9.24.0",
  //   "eslint-config-next": "15.3.1",
  //   "eslint-config-prettier": "^10.1.2",
  //   "eslint-plugin-react": "^7.37.5",
  //   "husky": "^8.0.3",
  //   "lint-staged": "^15.5.1",
  //   "prettier": "^3.5.3",
  //   "typescript": "^5"
  // }


.eslint.js
module.exports = {
	root: true,
	parser: "@typescript-eslint/parser",
	parserOptions: {
		ecmaVersion: 2020,
		sourceType: "module",
		project: "./tsconfig.json",
	},
	plugins: ["@typescript-eslint", "react", "tailwindcss"],
	extends: [
		"eslint:recommended",
		"plugin:react/recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:tailwindcss/recommended",
		"plugin:prettier/recommended",
		"next",
		"next/core-web-vitals",
	],
	rules: {
		// Customize rules if needed
		"@typescript-eslint/no-unused-vars": ["warn"],
		"react/react-in-jsx-scope": "off",
	},
};


eslint-config.mjs
import globals from "globals"
import pluginJs from "@eslint/js"
import tseslint from "typescript-eslint"
import pluginReact from "eslint-plugin-react"
import eslintPluginUnicorn from "eslint-plugin-unicorn"
import tailwind from "eslint-plugin-tailwindcss"
import { FlatCompat } from "@eslint/eslintrc"

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
})

/** @type {import('eslint').Linter.Config[]} */
const config = [
  { ignores: [".next/**", "public/**", "next.config.js", "postcss.config.js"] },
  { files: ["**/*.{js,mjs,cjs,ts,jsx,tsx}"] },
  { languageOptions: { globals: { ...globals.browser, ...globals.node } } },
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
  pluginReact.configs.flat.recommended,
  eslintPluginUnicorn.configs["flat/recommended"],
  ...tailwind.configs["flat/recommended"],
  ...compat.config({
    extends: ["next"],
    settings: {
      next: {
        rootDir: ".",
      },
    },
  }),
  ...compat.config({
    extends: ["plugin:drizzle/all"],
  }),
  {
    rules: {
      "no-undef": "error",
      "react/react-in-jsx-scope": "off",
      "tailwindcss/no-custom-classname": "off",
      "@typescript-eslint/no-unused-vars": [
        "error", // or "error"
        {
          argsIgnorePattern: "^_",
          varsIgnorePattern: "^_",
          caughtErrorsIgnorePattern: "^_",
        },
      ],
      "unicorn/prevent-abbreviations": "off",
    },
  },
  {
    files: ["**/*.{jsx,tsx}"],
    rules: {
      "no-console": "error",
    },
  },
]
export default config



const compat = new FlatCompat({
  baseDirectory: import.meta.dirname,
});

/** @type {import('eslint').Linter.Config[]} */
const config = [
  { ignores: ['.next/**', 'public/**', 'next.config.js', 'postcss.config.js'] },
  { files: ['**/*.{js,mjs,cjs,ts,jsx,tsx}'] },
  {
    languageOptions: {
      globals: { ...globals.browser, ...globals.node, React: 'writable' },
      parserOptions: {  ecmaFeatures: {jsx: true } },
  },
  },
  pluginJs.configs.recommended,
  pluginReact.configs.flat.recommended,
  ...compat.config({
    extends: ['next'],
    settings: {
      next: {
        rootDir: '.',
      },
    },
  }),

  {
    rules: {
      'no-undef': 'error',
      'react/react-in-jsx-scope': 'off',
    },
  },
  {
    files: ['**/*.{jsx,tsx}'],
    rules: {
      'no-console': 'error',
    },
  },
  
];
export default config;


import { logger } from "@/lib/logger";

logger.info("User clicked login button");
logger.error("Something went wrong", { error });
logger.debug("This is a debug log", { userId });
logger.warn("This is a warning log");


NextAuth route.ts
// app/api/auth/[...nextauth]/route.ts
import NextAuth, { AuthOptions } from 'next-auth';
import GitHubProvider from 'next-auth/providers/github';
import GoogleProvider from 'next-auth/providers/google';
import CredentialsProvider from 'next-auth/providers/credentials';
import bcrypt, { compare } from 'bcrypt';
import { connectDB } from '@/lib/mongodb';
import { User } from '@/models/User';
import { env } from '@/lib/validateEnv';
import crypto from 'crypto';

import type { OAuthUser, OAuthAccount, GitHubProfile } from '@/app/types/auth'; // import your custom types

export const authOptions: AuthOptions = {
  providers: [
    GitHubProvider({
      clientId: env.AUTH_GITHUB_ID,
      clientSecret: env.AUTH_GITHUB_SECRET,
    }),
    GoogleProvider({
      clientId: env.GOOGLE_CLIENT_ID,
      clientSecret: env.GOOGLE_CLIENT_SECRET,
    }),
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'text' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(
        credentials: Record<'email' | 'password', string> | undefined
      ) {
        await connectDB();

        const user = await User.findOne({ email: credentials?.email }).select(
          '+password'
        );
        if (!user) throw new Error('Invalid email or password');

        if (credentials === undefined)
          throw new Error('Credential is undefined ');

        const isValid = await compare(credentials.password, user.password);

        if (!isValid) throw new Error('Invalid email or password');
        // console.log("USER :" ,user);
        return {
          id: user._id.toString(),
          name: user.name,
          email: user.email,
          image: user.image,
          role: user.role,
        };
      },
    }),
  ],
  pages: {
    signIn: '/login',
  },
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async signIn({
      user,
      account: _account,
      profile : _profile,
    }: {
      user: OAuthUser;
      account: OAuthAccount;
      profile?: GitHubProfile;
    }) {
      // console.log('âœ… signIn callback triggered');
      // console.log('User:', user);
      // console.log('Account:', account);
      // console.log('Profile:', profile);

      await connectDB();

      const existing = await User.findOne({ email: user.email });

      // generate a random password so schema validation passes
      const randomPassword = crypto.randomBytes(16).toString('hex');
      const hashed = await bcrypt.hash(randomPassword, 10);

      if (!existing) {
        await User.create({
          name: user.name,
          email: user.email,
          image: user.image,
          role: 'user',
          password: hashed,
        });
      }

      return true;
    },

    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.name = user.name;
      }
      return token;
    },

    async session({ session, token }) {
      if (session?.user) {
        session.user.id = token.id as string;
        session.user.name = token.name;
        session.user.email = token.email;
      }
      // console.log('SESSION :', session);
      //console.log('USER :', session.user);
      return session;
    },
    async redirect({ url, baseUrl }) {
      // Safe redirect for all successful logins
      return url.startsWith(baseUrl) ? url : baseUrl + '/';
    },
  },
  secret: env.AUTH_SECRET!,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
